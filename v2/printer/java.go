package printer

import (
	"fmt"
	"text/template"

	"bytes"
	"crypto/md5"
	"strings"

	"github.com/davyxu/tabtoy/v2/i18n"
	"github.com/davyxu/tabtoy/v2/model"
)

const javaTemplate = `// Generated by github.com/davyxu/tabtoy
// Version: {{.ToolVersion}}
// DO NOT EDIT!!
package {{.PackageName}};
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonCreator;

public class {{.CombineStructName}} { {{$globalIndex:=.Indexes}}{{$verticalFields:=.VerticalFields}}
	{{range .Enums}}
	// Defined in table: {{.DefinedTable}}
	public enum {{.Name}} { {{range .Fields}}
		{{.Comment}}
		{{.FieldDescriptor.Name}}({{.FieldDescriptor.EnumValue}}), {{.Alias}} {{end}}
		;
		{{.Name}}(int v) {
			this.value = v;
		}
		public int getValue() {
		   return value;
		}
		
		private final int value;

		@JsonCreator
		public static {{.Name}} fromInt( int v ){
			switch (v) { {{range .Fields}}
				case {{.FieldDescriptor.EnumValue}}:
					return {{.FieldDescriptor.Name}}; {{end}}
			  	default:
					return null;
			}
		}
	}
	{{end}}
	{{range .Classes}}

	// Defined in table: {{.DefinedTable}}
	{{.JavaClassHeader}}
	public static class {{.Name}}
	{
	{{range .Fields}}	
		{{.Comment}}
		{{.TypeCode}} {{.Alias}}
	{{end}}
	} {{end}}

{{with .CombineStruct }}
{{range .Fields}}
	{{.Comment}}
	{{.TypeCode}} {{.Alias}}
{{end}}
{{end}}

	{{range $globalIndex}}Map<{{.IndexType}}, {{.RowType}}> _{{.RowName}}By{{.IndexName}} = new HashMap<{{.IndexType}}, {{.RowType}}>();
	public {{.RowType}} get{{.RowName}}By{{.IndexName}}({{.IndexType}} {{.IndexName}}) {
		return _{{.RowName}}By{{.IndexName}}.get({{.IndexName}});
	}
	{{end}}
	public String getBuildID() {
		return "{{$.BuildID}}";
	}
{{range $verticalFields}}
	public {{.StructName}} getKV_{{.Name}}() {
		return {{.Name}}.get(0);
	}	
{{end}}

	public void clear() {
		{{with .CombineStruct}} {{range .Fields}}		
			{{.Name}}.clear(); {{end}}
		{{range $globalIndex}}
			_{{.RowName}}By{{.IndexName}}.clear(); {{end}}
		{{end}}
	}

	// 构建索引, 需要捕获OnPostProcess可能抛出的异常
	public void buildData()  { {{range $globalIndex}}
		for({{.RowType}} v:{{.RowName}}) {
			_{{.RowName}}By{{.IndexName}}.put(v.{{.IndexName}}, v);
		}{{end}}
	}
}
`

type javaIndexField struct {
	TableIndex
}

func (self javaIndexField) IndexName() string {
	return self.Index.Name
}

func (self javaIndexField) RowType() string {
	return self.Row.Complex.Name
}

func (self javaIndexField) RowName() string {
	return self.Row.Name
}

func (self javaIndexField) IndexType() string {

	switch self.Index.Type {
	case model.FieldType_Int32:
		return "Integer"
	case model.FieldType_UInt32:
		return "Integer"
	case model.FieldType_Int64:
		return "Long"
	case model.FieldType_UInt64:
		return "Long"
	case model.FieldType_String:
		return "String"
	case model.FieldType_Float:
		return "Float"
	case model.FieldType_Bool:
		return "Boolean"
	case model.FieldType_Enum:

		return self.Index.Complex.Name
	default:
		log.Errorf("%s can not be index ", self.Index.String())
	}

	return "unknown"
}

type javaField struct {
	*model.FieldDescriptor

	IndexKeys []*model.FieldDescriptor

	parentStruct *javaStructModel
}

func (self javaField) Alias() string {

	v := self.FieldDescriptor.Meta.GetString("Alias")
	if v == "" {
		return ""
	}

	return "// " + v
}

func (self javaField) Comment() string {

	if self.FieldDescriptor.Comment == "" {
		return ""
	}

	// zjwps 建议修改
	return "/** \n		/* " + strings.Replace(self.FieldDescriptor.Comment, "\n", "\n		/*", -1) + "\n		*/"
}

func (self javaField) ReadCode() string {

	var baseType string

	var descHandlerCode string

	switch self.Type {
	case model.FieldType_Int32:
		baseType = "Integer"
	case model.FieldType_UInt32:
		baseType = "Integer"
	case model.FieldType_Int64:
		baseType = "Long"
	case model.FieldType_UInt64:
		baseType = "Long"
	case model.FieldType_String:
		baseType = "String"
	case model.FieldType_Float:
		baseType = "Float"
	case model.FieldType_Bool:
		baseType = "Boolean"
	case model.FieldType_Enum:

		if self.Complex == nil {
			return "unknown"
		}

		baseType = fmt.Sprintf("Enum<%s>", self.Complex.Name)

	case model.FieldType_Struct:
		if self.Complex == nil {
			return "unknown"
		}

		baseType = fmt.Sprintf("Struct<%s>", self.Complex.Name)

	}

	if self.Type == model.FieldType_Struct {
		descHandlerCode = fmt.Sprintf("%sDeserializeHandler", self.Complex.Name)
	}

	if self.IsRepeated {
		return fmt.Sprintf("ins.%s.Add( reader.Read%s(%s) );", self.Name, baseType, descHandlerCode)
	} else {
		return fmt.Sprintf("ins.%s = reader.Read%s(%s);", self.Name, baseType, descHandlerCode)
	}

}

func (self javaField) Tag() string {

	if self.parentStruct.IsCombine() {
		tag := model.MakeTag(int32(model.FieldType_Table), self.Order)

		return fmt.Sprintf("0x%x", tag)
	}

	return fmt.Sprintf("0x%x", self.FieldDescriptor.Tag())
}

func (self javaField) StructName() string {
	if self.Complex == nil {
		return "[NotComplex]"
	}

	return self.Complex.Name
}

func (self javaField) IsVerticalStruct() bool {
	if self.FieldDescriptor.Complex == nil {
		return false
	}

	return self.FieldDescriptor.Complex.File.Pragma.GetBool("Vertical")
}

func (self javaField) TypeCode() string {

	var raw string

	switch self.Type {
	case model.FieldType_Int32:
		raw = "Integer"
	case model.FieldType_UInt32:
		raw = "Integer"
	case model.FieldType_Int64:
		raw = "Long"
	case model.FieldType_UInt64:
		raw = "Long"
	case model.FieldType_String:
		raw = "String"
	case model.FieldType_Float:
		raw = "Float"
	case model.FieldType_Bool:
		raw = "Boolean"
	case model.FieldType_Enum:
		if self.Complex == nil {
			log.Errorln("unknown enum type ", self.Type)
			return "unknown"
		}

		raw = self.Complex.Name
	case model.FieldType_Struct:
		if self.Complex == nil {
			log.Errorln("unknown struct type ", self.Type, self.FieldDescriptor.Name, self.FieldDescriptor.Parent.Name)
			return "unknown"
		}

		raw = self.Complex.Name

		// 非repeated的结构体
		if !self.IsRepeated {
			return fmt.Sprintf("public %s %s = new %s();", raw, self.Name, raw)
		}

	default:
		raw = "unknown"
	}

	if self.IsRepeated {
		return fmt.Sprintf("public List<%s> %s = new ArrayList<%s>();", raw, self.Name, raw)
	}

	return fmt.Sprintf("public %s %s = %s;", raw, self.Name, wrapjavaDefaultValue(self.parentStruct.RootStruct, self.FieldDescriptor))
}

func wrapjavaDefaultValue(m *javaFileModel, fd *model.FieldDescriptor) string {
	switch fd.Type {
	case model.FieldType_Enum:
		return fmt.Sprintf("%s.%s.%s", m.CombineStructName, fd.Complex.Name, fd.DefaultValue())
	case model.FieldType_String:
		return fmt.Sprintf("\"%s\"", fd.DefaultValue())
	case model.FieldType_Float:
		return fmt.Sprintf("%sf", fd.DefaultValue())
	case model.FieldType_Int64, model.FieldType_UInt64:
		return fmt.Sprintf("%sL", fd.DefaultValue())
	}

	return fd.DefaultValue()
}

type javaStructModel struct {
	*model.Descriptor
	Fields        []javaField
	IndexedFields []javaField // 与javaField.IndexKeys组成树状的索引层次
	RootStruct    *javaFileModel
}

func (self *javaStructModel) JavaClassHeader() string {

	// zjwps 提供需求
	return self.File.Pragma.GetString("JavaClassHeader")
}

func (self *javaStructModel) DefinedTable() string {
	return self.File.Name
}

func (self *javaStructModel) Name() string {
	return self.Descriptor.Name
}

func (self *javaStructModel) IsCombine() bool {
	return self.Descriptor.Usage == model.DescriptorUsage_CombineStruct
}

type javaFileModel struct {
	PackageName       string
	ToolVersion       string
	CombineStructName string
	CombineStruct     *javaStructModel
	Classes           []*javaStructModel
	Enums             []*javaStructModel
	Indexes           []javaIndexField // 全局的索引

	VerticalFields []javaField

	BuildID string
}

type javaPrinter struct {
}

func (self *javaPrinter) Run(g *Globals) *Stream {

	tpl, err := template.New("java").Parse(javaTemplate)
	if err != nil {
		log.Errorln(err)
		return nil
	}

	var m javaFileModel

	if g.PackageName != "" {
		m.PackageName = g.PackageName
	} else {
		m.PackageName = g.FileDescriptor.Pragma.GetString("Package")
	}

	if g.CombineStructName != "" {
		m.CombineStructName = g.CombineStructName
	} else {
		m.CombineStructName = "Table"
	}

	m.ToolVersion = g.Version

	// combinestruct的全局索引
	for _, ti := range g.GlobalIndexes {

		// 索引也限制
		if !ti.Index.Parent.File.MatchTag(".java") {
			continue
		}

		m.Indexes = append(m.Indexes, javaIndexField{TableIndex: ti})
	}

	// 遍历所有类型
	for _, d := range g.FileDescriptor.Descriptors {

		// 这给被限制输出
		if !d.File.MatchTag(".java") {
			log.Infof("%s: %s", i18n.String(i18n.Printer_IgnoredByOutputTag), d.Name)
			continue
		}

		var sm javaStructModel
		sm.Descriptor = d
		sm.RootStruct = &m

		if d.Usage == model.DescriptorUsage_CombineStruct {
			m.CombineStruct = &sm
		} else {
			switch d.Kind {
			case model.DescriptorKind_Struct:
				m.Classes = append(m.Classes, &sm)
			case model.DescriptorKind_Enum:
				m.Enums = append(m.Enums, &sm)
			}
		}

		// 遍历字段
		for _, fd := range d.Fields {

			// 对CombineStruct的XXDefine对应的字段
			if d.Usage == model.DescriptorUsage_CombineStruct {

				// 这个字段被限制输出
				if fd.Complex != nil && !fd.Complex.File.MatchTag(".java") {
					continue
				}

				// 这个结构有索引才创建
				if fd.Complex != nil && len(fd.Complex.Indexes) > 0 {

					// 被索引的结构
					indexedField := javaField{FieldDescriptor: fd, parentStruct: &sm}

					// 索引字段
					for _, key := range fd.Complex.Indexes {
						indexedField.IndexKeys = append(indexedField.IndexKeys, key)
					}

					sm.IndexedFields = append(sm.IndexedFields, indexedField)
				}

				if fd.Complex != nil && fd.Complex.File.Pragma.GetBool("Vertical") {
					m.VerticalFields = append(m.VerticalFields, javaField{FieldDescriptor: fd, parentStruct: &sm})
				}

			}

			javaField := javaField{FieldDescriptor: fd, parentStruct: &sm}

			sm.Fields = append(sm.Fields, javaField)

		}

	}

	bf := NewStream()

	var md5Buffer bytes.Buffer
	err = tpl.Execute(&md5Buffer, &m)
	if err != nil {
		log.Errorln(err)
		return nil
	}

	m.BuildID = fmt.Sprintf("%x", md5.Sum(md5Buffer.Bytes()))
	g.BuildID = m.BuildID

	err = tpl.Execute(bf.Buffer(), &m)
	if err != nil {
		log.Errorln(err)
		return nil
	}

	return bf
}

func init() {

	RegisterPrinter("java", &javaPrinter{})

}
